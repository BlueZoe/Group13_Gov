{"remainingRequest":"E:\\Government\\client2.0\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Government\\client2.0\\client\\src\\components\\vue-img-verify.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Government\\client2.0\\client\\src\\components\\vue-img-verify.vue","mtime":1574689958866},{"path":"E:\\Government\\client2.0\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Government\\client2.0\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Government\\client2.0\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Government\\client2.0\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcG9vbDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMTIzNDU2Nzg5MCcsIC8vIOWtl+espuS4sgogICAgICB3aWR0aDogMTIwLAogICAgICBoZWlnaHQ6IDQwLAogICAgICBpbWdDb2RlOiAnJwogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIC8vIOe7mOWItuWbvueJh+mqjOivgeeggQogICAgICB0aGlzLiRlbWl0KCdnZXRJbWdDb2RlJywgdGhpcy5kcmF3KCkpCiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDngrnlh7vlm77niYfph43mlrDnu5jliLYKICAgIGhhbmRsZURyYXcoKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2dldEltZ0NvZGUnLCB0aGlzLmRyYXcoKSkKICAgIH0sCgogICAgLy8gMS7pmo/mnLrmlbAKICAgIHJhbmRvbU51bShtaW4sIG1heCkgewogICAgICByZXR1cm4gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKQogICAgfSwKICAgIC8vIDIu6ZqP5py66aKc6ImyCiAgICByYW5kb21Db2xvcihtaW4sIG1heCkgewogICAgICBjb25zdCByID0gdGhpcy5yYW5kb21OdW0obWluLCBtYXgpCiAgICAgIGNvbnN0IGcgPSB0aGlzLnJhbmRvbU51bShtaW4sIG1heCkKICAgICAgY29uc3QgYiA9IHRoaXMucmFuZG9tTnVtKG1pbiwgbWF4KQogICAgICByZXR1cm4gYHJnYigke3J9LCR7Z30sJHtifSlgCiAgICB9LAogICAgLy8g57uY5Yi25Zu+54mHCiAgICBkcmF3KCkgewogICAgICAvLyAzLuWhq+WFheiDjOaZr+minOiJsu+8jOiDjOaZr+minOiJsuimgea1heS4gOeCuQogICAgICBjb25zdCBjdHggPSB0aGlzLiRyZWZzLnZlcmlmeS5nZXRDb250ZXh0KCcyZCcpCiAgICAgIC8vIOWhq+WFheminOiJsgogICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5yYW5kb21Db2xvcigxODAsIDIzMCkKICAgICAgLy8g5aGr5YWF55qE5L2N572uCiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCkKICAgICAgLy8g5a6a5LmJcGFyYW1UZXh0CiAgICAgIGxldCBpbWdDb2RlID0gJycKICAgICAgLy8gNC7pmo/mnLrkuqfnlJ/lrZfnrKbkuLLvvIzlubbkuJTpmo/mnLrml4vovawKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAvLyDpmo/mnLrnmoTlm5vkuKrlrZcKICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5wb29sW3RoaXMucmFuZG9tTnVtKDAsIHRoaXMucG9vbC5sZW5ndGgpXQogICAgICAgIGltZ0NvZGUgKz0gdGV4dAogICAgICAgIC8vIOmaj+acuueahOWtl+S9k+Wkp+WwjwogICAgICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5yYW5kb21OdW0oMTgsIDQwKQogICAgICAgIC8vIOWtl+S9k+maj+acuueahOaXi+i9rOinkuW6pgogICAgICAgIGNvbnN0IGRlZyA9IHRoaXMucmFuZG9tTnVtKC0zMCwgMzApCiAgICAgICAgLyoKICAgICAgICAgKiDnu5jliLbmloflrZflubborqnlm5vkuKrmloflrZflnKjkuI3lkIznmoTkvY3nva7mmL7npLrnmoTmgJ3ot68gOgogICAgICAgICAqIDHjgIHlrprkuYnlrZfkvZMKICAgICAgICAgKiAy44CB5a6a5LmJ5a+56b2Q5pa55byPCiAgICAgICAgICogM+OAgeWhq+WFheS4jeWQjOeahOminOiJsgogICAgICAgICAqIDTjgIHkv53lrZjlvZPliY3nmoTnirbmgIHvvIjku6XpmLLmraLku6XkuIrnmoTnirbmgIHlj5flvbHlk43vvIkKICAgICAgICAgKiA144CB5bmz56e7dHJhbnNsYXRlKCkKICAgICAgICAgKiA244CB5peL6L2sIHJvdGF0ZSgpCiAgICAgICAgICogN+OAgeWhq+WFheaWh+WtlwogICAgICAgICAqIDjjgIFyZXN0b3Jl5Ye65qCICiAgICAgICAgICogKi8KICAgICAgICBjdHguZm9udCA9IGZvbnRTaXplICsgJ3B4IFNpbWhlaScKICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCcKICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5yYW5kb21Db2xvcig4MCwgMTUwKQogICAgICAgIC8qCiAgICAgICAgICogc2F2ZSgpIOaWueazleaKiuW9k+WJjeeKtuaAgeeahOS4gOS7veaLt+i0neWOi+WFpeWIsOS4gOS4quS/neWtmOWbvuWDj+eKtuaAgeeahOagiOS4reOAggogICAgICAgICAqIOi/meWwseWFgeiuuOaCqOS4tOaXtuWcsOaUueWPmOWbvuWDj+eKtuaAge+8jAogICAgICAgICAqIOeEtuWQju+8jOmAmui/h+iwg+eUqCByZXN0b3JlKCkg5p2l5oGi5aSN5Lul5YmN55qE5YC844CCCiAgICAgICAgICogc2F2ZeaYr+WFpeagiO+8jHJlc3RvcmXmmK/lh7rmoIjjgIIKICAgICAgICAgKiDnlKjmnaXkv53lrZhDYW52YXPnmoTnirbmgIHjgIJzYXZl5LmL5ZCO77yM5Y+v5Lul6LCD55SoQ2FudmFz55qE5bmz56e744CB5pS+57yp44CB5peL6L2s44CB6ZSZ5YiH44CB6KOB5Ymq562J5pON5L2c44CCIHJlc3RvcmXvvJrnlKjmnaXmgaLlpI1DYW52YXPkuYvliY3kv53lrZjnmoTnirbmgIHjgILpmLLmraJzYXZl5ZCO5a+5Q2FudmFz5omn6KGM55qE5pON5L2c5a+55ZCO57ut55qE57uY5Yi25pyJ5b2x5ZON44CCCiAgICAgICAgICoKICAgICAgICAgKiAqLwogICAgICAgIGN0eC5zYXZlKCkKICAgICAgICBjdHgudHJhbnNsYXRlKDMwICogaSArIDE1LCAxNSkKICAgICAgICBjdHgucm90YXRlKChkZWcgKiBNYXRoLlBJKSAvIDE4MCkKICAgICAgICAvLyBmaWxsVGV4dCgpIOaWueazleWcqOeUu+W4g+S4iue7mOWItuWhq+iJsueahOaWh+acrOOAguaWh+acrOeahOm7mOiupOminOiJsuaYr+m7keiJsuOAggogICAgICAgIC8vIOivt+S9v+eUqCBmb250IOWxnuaAp+adpeWumuS5ieWtl+S9k+WSjOWtl+WPt++8jOW5tuS9v+eUqCBmaWxsU3R5bGUg5bGe5oCn5Lul5Y+m5LiA56eN6aKc6ImyL+a4kOWPmOadpea4suafk+aWh+acrOOAggogICAgICAgIC8vIGNvbnRleHQuZmlsbFRleHQodGV4dCx4LHksbWF4V2lkdGgpOwogICAgICAgIGN0eC5maWxsVGV4dCh0ZXh0LCAtMTUgKyA1LCAtMTUpCiAgICAgICAgY3R4LnJlc3RvcmUoKQogICAgICB9CiAgICAgIC8vIDUu6ZqP5py65Lqn55SfNeadoeW5suaJsOe6vyzlubLmibDnur/nmoTpopzoibLopoHmtYXkuIDngrkKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHsKICAgICAgICBjdHguYmVnaW5QYXRoKCkKICAgICAgICBjdHgubW92ZVRvKHRoaXMucmFuZG9tTnVtKDAsIHRoaXMud2lkdGgpLCB0aGlzLnJhbmRvbU51bSgwLCB0aGlzLmhlaWdodCkpCiAgICAgICAgY3R4LmxpbmVUbyh0aGlzLnJhbmRvbU51bSgwLCB0aGlzLndpZHRoKSwgdGhpcy5yYW5kb21OdW0oMCwgdGhpcy5oZWlnaHQpKQogICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMucmFuZG9tQ29sb3IoMTgwLCAyMzApCiAgICAgICAgY3R4LmNsb3NlUGF0aCgpCiAgICAgICAgY3R4LnN0cm9rZSgpCiAgICAgIH0KICAgICAgLy8gNi7pmo/mnLrkuqfnlJ80MOS4quW5suaJsOeahOWwj+eCuQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpKyspIHsKICAgICAgICBjdHguYmVnaW5QYXRoKCkKICAgICAgICBjdHguYXJjKHRoaXMucmFuZG9tTnVtKDAsIHRoaXMud2lkdGgpLCB0aGlzLnJhbmRvbU51bSgwLCB0aGlzLmhlaWdodCksIDEsIDAsIDIgKiBNYXRoLlBJKQogICAgICAgIGN0eC5jbG9zZVBhdGgoKQogICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnJhbmRvbUNvbG9yKDE1MCwgMjAwKQogICAgICAgIGN0eC5maWxsKCkKICAgICAgfQogICAgICByZXR1cm4gaW1nQ29kZQogICAgfQogIH0KfQo="},{"version":3,"sources":["vue-img-verify.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vue-img-verify.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"img-verify\">\n    <canvas ref=\"verify\" :width=\"width\" :height=\"height\" @click=\"handleDraw\"></canvas>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\nexport default {\n  data() {\n    return {\n      pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', // 字符串\n      width: 120,\n      height: 40,\n      imgCode: ''\n    }\n  },\n  mounted() {\n    // 绘制图片验证码\n      this.$emit('getImgCode', this.draw())\n  },\n  methods: {\n    // 点击图片重新绘制\n    handleDraw() {\n      this.$emit('getImgCode', this.draw())\n    },\n\n    // 1.随机数\n    randomNum(min, max) {\n      return parseInt(Math.random() * (max - min) + min)\n    },\n    // 2.随机颜色\n    randomColor(min, max) {\n      const r = this.randomNum(min, max)\n      const g = this.randomNum(min, max)\n      const b = this.randomNum(min, max)\n      return `rgb(${r},${g},${b})`\n    },\n    // 绘制图片\n    draw() {\n      // 3.填充背景颜色，背景颜色要浅一点\n      const ctx = this.$refs.verify.getContext('2d')\n      // 填充颜色\n      ctx.fillStyle = this.randomColor(180, 230)\n      // 填充的位置\n      ctx.fillRect(0, 0, this.width, this.height)\n      // 定义paramText\n      let imgCode = ''\n      // 4.随机产生字符串，并且随机旋转\n      for (let i = 0; i < 4; i++) {\n        // 随机的四个字\n        const text = this.pool[this.randomNum(0, this.pool.length)]\n        imgCode += text\n        // 随机的字体大小\n        const fontSize = this.randomNum(18, 40)\n        // 字体随机的旋转角度\n        const deg = this.randomNum(-30, 30)\n        /*\n         * 绘制文字并让四个文字在不同的位置显示的思路 :\n         * 1、定义字体\n         * 2、定义对齐方式\n         * 3、填充不同的颜色\n         * 4、保存当前的状态（以防止以上的状态受影响）\n         * 5、平移translate()\n         * 6、旋转 rotate()\n         * 7、填充文字\n         * 8、restore出栈\n         * */\n        ctx.font = fontSize + 'px Simhei'\n        ctx.textBaseline = 'top'\n        ctx.fillStyle = this.randomColor(80, 150)\n        /*\n         * save() 方法把当前状态的一份拷贝压入到一个保存图像状态的栈中。\n         * 这就允许您临时地改变图像状态，\n         * 然后，通过调用 restore() 来恢复以前的值。\n         * save是入栈，restore是出栈。\n         * 用来保存Canvas的状态。save之后，可以调用Canvas的平移、放缩、旋转、错切、裁剪等操作。 restore：用来恢复Canvas之前保存的状态。防止save后对Canvas执行的操作对后续的绘制有影响。\n         *\n         * */\n        ctx.save()\n        ctx.translate(30 * i + 15, 15)\n        ctx.rotate((deg * Math.PI) / 180)\n        // fillText() 方法在画布上绘制填色的文本。文本的默认颜色是黑色。\n        // 请使用 font 属性来定义字体和字号，并使用 fillStyle 属性以另一种颜色/渐变来渲染文本。\n        // context.fillText(text,x,y,maxWidth);\n        ctx.fillText(text, -15 + 5, -15)\n        ctx.restore()\n      }\n      // 5.随机产生5条干扰线,干扰线的颜色要浅一点\n      for (let i = 0; i < 5; i++) {\n        ctx.beginPath()\n        ctx.moveTo(this.randomNum(0, this.width), this.randomNum(0, this.height))\n        ctx.lineTo(this.randomNum(0, this.width), this.randomNum(0, this.height))\n        ctx.strokeStyle = this.randomColor(180, 230)\n        ctx.closePath()\n        ctx.stroke()\n      }\n      // 6.随机产生40个干扰的小点\n      for (let i = 0; i < 40; i++) {\n        ctx.beginPath()\n        ctx.arc(this.randomNum(0, this.width), this.randomNum(0, this.height), 1, 0, 2 * Math.PI)\n        ctx.closePath()\n        ctx.fillStyle = this.randomColor(150, 200)\n        ctx.fill()\n      }\n      return imgCode\n    }\n  }\n}\n</script>\n<style type=\"text/css\">\n.img-verify canvas {\n  cursor: pointer;\n}\n</style>\n"]}]}